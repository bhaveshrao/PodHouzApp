{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"size\", \"color\", \"style\", \"animating\", \"hidesWhenStopped\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { defaultProps } from \"./SpinnerProps\";\nimport AnimationContainer from \"./AnimationContainer\";\nimport { loop, stagger } from \"./utils\";\n\nvar Chase = function (_React$Component) {\n  _inherits(Chase, _React$Component);\n\n  var _super = _createSuper(Chase);\n\n  function Chase() {\n    _classCallCheck(this, Chase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Chase, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          color = _this$props.color,\n          style = _this$props.style,\n          animating = _this$props.animating,\n          hidesWhenStopped = _this$props.hidesWhenStopped,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var circleStyle = {\n        position: 'absolute',\n        width: size / 4,\n        height: size / 4,\n        backgroundColor: color,\n        borderRadius: size / 8\n      };\n      return React.createElement(AnimationContainer, {\n        initAnimation: function initAnimation() {\n          return {\n            chase: function chase(value) {\n              return {\n                values: [value],\n                animation: loop({\n                  duration: 2500,\n                  easing: Easing.linear,\n                  value: value\n                })\n              };\n            },\n            chaseDot: function chaseDot(value) {\n              return stagger(100, 6, {\n                duration: 2000,\n                value: value,\n                keyframes: [0, 80, 100]\n              });\n            },\n            chaseDotBefore: function chaseDotBefore(value) {\n              return stagger(100, 6, {\n                duration: 2000,\n                value: value,\n                keyframes: [0, 50, 100]\n              });\n            }\n          };\n        },\n        animating: animating\n      }, function (values) {\n        return React.createElement(Animated.View, _extends({\n          style: [{\n            width: size,\n            height: size,\n            alignItems: 'center',\n            justifyContent: 'center',\n            opacity: !animating && hidesWhenStopped ? 0 : 1,\n            transform: [{\n              rotate: values.chase[0].interpolate({\n                inputRange: [0, 100],\n                outputRange: ['0deg', '360deg']\n              })\n            }]\n          }, style]\n        }, rest), values.chaseDot.map(function (value, index) {\n          return React.createElement(Animated.View, {\n            key: index,\n            style: [circleStyle, {\n              transform: [{\n                rotate: value.interpolate({\n                  inputRange: [0, 80, 100],\n                  outputRange: ['0deg', '360deg', '360deg']\n                })\n              }, {\n                translateY: -size / 2 + size / 8\n              }, {\n                scale: values.chaseDotBefore[index].interpolate({\n                  inputRange: [0, 50, 100],\n                  outputRange: [1, 0.4, 1]\n                })\n              }]\n            }]\n          });\n        }));\n      });\n    }\n  }]);\n\n  return Chase;\n}(React.Component);\n\nexport { Chase as default };\n\n_defineProperty(Chase, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["Chase.tsx"],"names":["Chase","React","defaultProps","render","rest","circleStyle","position","width","size","height","backgroundColor","borderRadius","chase","value","values","animation","loop","duration","easing","Easing","chaseDot","stagger","keyframes","chaseDotBefore","animating","alignItems","justifyContent","opacity","transform","rotate","inputRange","outputRange","translateY","scale"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Animated, Easing } from 'react-native'\nimport { SpinnerProps, defaultProps } from './SpinnerProps'\nimport AnimationContainer from './AnimationContainer'\nimport { loop, stagger } from './utils'\n\nexport default class Chase extends React.Component<SpinnerProps> {\n  static defaultProps = defaultProps\n\n  render() {\n    const {\n      size,\n      color,\n      style,\n      animating,\n      hidesWhenStopped,\n      ...rest\n    } = this.props\n    const circleStyle = {\n      position: 'absolute',\n      width: size / 4,\n      height: size / 4,\n      backgroundColor: color,\n      borderRadius: size / 8,\n    }\n\n    return (\n      <AnimationContainer\n        initAnimation={() => ({\n          chase: (value) => ({\n            values: [value],\n            animation: loop({\n              duration: 2500,\n              easing: Easing.linear,\n              value: value,\n            }),\n          }),\n          chaseDot: (value) =>\n            stagger(100, 6, {\n              duration: 2000,\n              value: value,\n              keyframes: [0, 80, 100],\n            }),\n          chaseDotBefore: (value) =>\n            stagger(100, 6, {\n              duration: 2000,\n              value: value,\n              keyframes: [0, 50, 100],\n            }),\n        })}\n        animating={animating}\n      >\n        {(values) => (\n          <Animated.View\n            style={[\n              {\n                width: size,\n                height: size,\n                alignItems: 'center',\n                justifyContent: 'center',\n                opacity: !animating && hidesWhenStopped ? 0 : 1,\n                transform: [\n                  {\n                    rotate: values.chase[0].interpolate({\n                      inputRange: [0, 100],\n                      outputRange: ['0deg', '360deg'],\n                    }),\n                  },\n                ],\n              },\n              style,\n            ]}\n            {...rest}\n          >\n            {values.chaseDot.map((value, index) => (\n              <Animated.View\n                key={index}\n                style={[\n                  circleStyle,\n                  {\n                    transform: [\n                      {\n                        rotate: value.interpolate({\n                          inputRange: [0, 80, 100],\n                          outputRange: ['0deg', '360deg', '360deg'],\n                        }),\n                      },\n                      { translateY: -size / 2 + size / 8 },\n                      {\n                        scale: values.chaseDotBefore[index].interpolate({\n                          inputRange: [0, 50, 100],\n                          outputRange: [1, 0.4, 1],\n                        }),\n                      },\n                    ],\n                  },\n                ]}\n              />\n            ))}\n          </Animated.View>\n        )}\n      </AnimationContainer>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}